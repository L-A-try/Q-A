#
# This file contains all the parameters required for OptorSim
# using the Properties class to store this information.
#

#grid.configuration.file = examples/cms_testbed_grid.conf
#job.configuration.file =  examples/cms_testbed_jobs.conf
/**------------------------------------
     * @author 李昂
     * @return
**/
grid.configuration.file = examples/simple_grid.conf
job.configuration.file =  examples/simple_job.conf

bandwidth.configuration.file = examples/cms_testbed_bandwidths.conf
/**------------------------------------
     * @author 李昂
     * @return 任务的数量，刚100 改成了1
**/
number.jobs = 1000
#
# The choice of the scheduling algorithms for the RB is: RB调度算法
# (1) random 随机
# (2) queue length 队列长度
# (3) access cost for current job 当前作业的访问成本
# (4) access cost for current job + all queued jobs 当前作业+所有排队作业的访问成本
scheduler = 4
#
# Computing Element - currently only one type 计算元素-目前只有一种类型？？？？？？？
#
computing.element = 1
#
# The categories of users available are:可用的用户类别包括
# (1) Simple - wait job delay between submitting jobs提交作业之间的简单等待作业延迟
# (2) Random - wait uniform random time between 0 and 2 * job delay随机-等待0到2*作业延迟之间的均匀随机时间
# (3) CMS DC04 UsersCMS DC04用户
users = 1
#
# The choice of optimisers is:
# (1) SimpleOptimiser - no replication.无复制
# (2) LruOptimiser - always replicates, deleting least recently
#        created file.总是复制，最近删除最少创建的文件
# (3) LfuOptimiser - always replicates, deleting least frequently
#        accessed file.总是复制，最近删除使用的文件
# (4) EcoModelOptimiser - replicates when eco-model says yes, deleting
#        least valuable file.删除价值衡量后的文件
# (5) EcoModelOptimizer Zipf-like distribution zipf分布
optimiser = 2
#
# automatically multiplied by scale factor自动乘以比例因子
#
dt = 1000000
#
# The choice of access pattern generators is:访问模式生成器的选择是
# (1) SequentialAccessGenerator - Files are accessed in order.按顺序访问文件
# (2) RandomAccessGenerator - Files are accessed using a flat random
#        distribution.使用平面随机分配
# (3) RandomWalkUnitaryAccessGenerator - Files are accessed using a
#        unitary random walk. 使用单一随机漫步访问
# (4) RandomWalkGaussianAccessGenerator - Files are accessed using a
#        Gaussian random walk. 使用高斯随机游走
# (5) RandomZipfAccessGenerator - Files are accessed using a
#         Zipf distribution 使用zipf分布
#
access.pattern.generator = 5
# Shape parameter for Zipf-like distribution > 0类Zipf分布的形状参数>0
shape = 0.85
#
# The initial file distribution is either "random" in which case the
# master files are distributed randomly to SEs or numbers separated
# commas (e.g. 8,10,15) giving the sites where all the masters
# should be evenly distributed.
# (in edg testbed site 8 is CERN)
#初始文件分发是“随机”的，在这种情况下，主文件随机分发到SEs或数字分隔的逗号（例如8、10、15），给出所有主文件应均匀分布的位置。
#（在edg试验台现场8是CERN）
#
/**------------------------------------
     * @author 李昂
     * @return
**/
initial.file.distribution = 2
#initial.file.distribution = random
#initial.file.distribution = 14
#
# Do we want to fill all the SEs with replicas?
#我们想用复制品填充所有的SEs吗
fill.all.sites = no
#
# The job delay is the interval in ms between the RB submitting each job.
# Automatically multiplied by scale factor作业延迟是RB提交每个作业之间的间隔（毫秒）。
                                          #自动乘以比例因子
#
job.delay = 2500
#
# The random seed for deciding which jobs are chosen can be random or决定选择哪个作业的随机种子可以是随机的，也可以是随机的
# fixed.
#
random.seed = yes
#
# The maximum queue size is the maximum number of jobs the JobHandler最大队列大小是JobHandler处理的最大作业数
# will keep in its queue.
#
max.queue.size = 200
#
#
#################
# Auction stuff #
#################
#
auction.flag = yes
# actually the number of sites contacted实际联系的站点数量
hop.count = 50
timeout = 500
timeout.reduction.factor = 0.4
#
# Outputs auction information to auction.log. Can slow the
# simulation down a little bit.
#
auction.log = no
#
#############################
# BandwidthReader stuff     #
#############################
# flag to switch background traffic on or off
background.bandwidth = no
#
# The directory in which your background bandwidth data files are stored
data.directory = examples/bw_data/cms_testbed/
#
# The datafile to use when no other background data are available. 
# For EDG, lyon_to_cern_ave.numbers is good; for UK dl_to_ncl_ave.numbers is good.
default.background = lyon_to_cern.dat
# 
# The time of day used as starting point. Should be in hours, with minutes after
# the decimal point e.g. 22.5 for 22:30, and must be on the hour or half-hour.
time.of.day = 0.0
#
#############
# GUI stuff #
#############
#
# Option to use the GUI
#
gui = yes
#
##############
# Statistics #
##############
#
# Level of statistics to be printed out at the end of the simulation
# (1) None
# (2) Simple - only stats for the whole grid
# (3) Full - full stats for all elements on all sites
#
statistics = 3
#
##############
# Time Model #
##############
#
# use advanced grid time (yes) or not (no)
#
time.advance = yes
#
# end
#
